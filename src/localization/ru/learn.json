{
  "examples.starter.title": "Практика",
  "examples.starter.description": "Теперь пора попрактиковаться, чтобы закрепить то, что вы узнали.",

  "examples.finish.title": "Практика завершена!",
  "examples.finish.description": " ",

  "steps.starter.title": "Вступление",
  "steps.starter.description": "Regex - это сокращение от `Regular Expression` `(Регулярное выражение)`. Это помогает сопоставлять, находить или управлять текстом. Начните с ввода `OK` (латиницей) в поле Regex, чтобы перейти к первому шагу и получить доступ к более подробному описанию..",

  "steps.whatIsRegex.title": "Что такое регулярные выражения `Regex`?",
  "steps.whatIsRegex.description": "Регулярные выражения - это строка символов, которые выражает шаблон поиска, часто сокращается как `Regex` или `Regexp`. Regexp используется для поиска или замены слов в текстах, кроме того, мы можем проверить, соответствует ли текст установленным нами правилам или нет.\\n\\n Например, у вас есть список имен файлов и вы хотите найти только файлы с расширением `pdf`. После ввода выражения `^\\w+\\.pdf$` это будет работать. Значение определений в этом выражении станет яснее по мере выполнения шагов.",

  "steps.basicMatchers.title": "Базовые сходства",
  "steps.basicMatchers.description": "Символ или слово, которое мы хотим найти, написано напрямую - это похоже на обычный процесс поиска. Например, чтобы найти слово `curious` в тексте, введите то же самое.",

  "steps.dotCharacter.title": "Точка `.`: Любые символы",
  "steps.dotCharacter.description": "Точка `.` позволяет выбрать любой символ, включая специальные символы и пробелы.",

  "steps.characterSet.title": "Наборы символов `[abc]`",
  "steps.characterSet.description": "Если одним из символов в слове могут быть разные символы, мы записываем его в квадратные скобки `[]` со всеми альтернативными символами. Например, чтобы написать выражение, которое может найти все слова в тексте, введите символы `a`, `e`, `i`, `o`, `u` в квадратных скобках `[]`.",

  "steps.negatedCharacterSet.title": "Наборы негативных символов `[^abc]`",
  "steps.negatedCharacterSet.description": "Чтобы найти все слова в приведённом ниже тексте, кроме `ber` и `bor`, введите `e` и `o` рядом после символа каретки `^` внутри квадратных скобок `[]`.",

  "steps.range.title": "Буквенный диапазон `[a-z]`",
  "steps.range.description": "Чтобы найти буквы в указанном диапазоне, начальная буква и конечная буква заключаются в квадратные скобки `[]` с тире между ними `-`. Регистр учитывается. Введите выражение, которое выберет все строчные буквы между `e` и `o`, включая их самих.",

  "steps.rangeNumber.title": "Цифровой диапазон `[0-9]`",
  "steps.rangeNumber.description": "Чтобы найти числа в указанном диапазоне, начальный номер и конечный номер записываются в квадратных скобках `[]` с тире `-` между ними. Напишите выражение, которое выберет все числа от `3` до` 6`, включая самих себя.",

  "examples.basicMatchers.title": "Практика: Базовые сходства",
  "examples.basicMatchers.description": "Напишите выражение, которое будет выбирать слова `of` в тексте.",

  "examples.dotCharacter.title": "Практика: Любые символы",
  "examples.dotCharacter.description": "Введите выражение для выбора отдельных букв, цифр, пробелов и специальных символов в тексте. Вводимое выражение должно соответствовать любому символу.",

  "examples.characterSet.title": "Практика: Наборы символов",
  "examples.characterSet.description": "Напишите фразу, которая соответствует каждому слову в тексте. Единственные символы, которые меняются - это инициалы слов.",

  "examples.negatedCharacterSet.title": "Практика: Отрицательные наборы символов",
  "examples.negatedCharacterSet.description": "Запишите выражение, которое будет соответствовать чему-либо, кроме слов `beor` и `beur` в тексте. Сделайте это, используя отрицательный набор символов.",

  "examples.range.title": "Практика: Диапазон букв",
  "examples.range.description": "Напишите выражение, которое будет выбирать буквы от `g` до `k` в тексте.\\n `g` и `k` также должны быть включены в этот диапазон.",

  "examples.rangeNumber.title": "Практика: Диапазон номеров",
  "examples.rangeNumber.description": "Введите выражение для выбора чисел от `2` до `7` в тексте.\\n `2` и `7` также должны быть включены в этот диапазон.",

  "steps.repetitions.title": "Повторение",
  "steps.repetitions.description": "Некоторые специальные символы используются для указания того, сколько раз символ будет повторяться в тексте. Эти специальные символы - плюс `+`, звездочка `*` и вопросительный знак `?`.",

  "steps.asterisk.title": "Звёздочка `*`",
  "steps.asterisk.description": "Мы ставим звездочку `*` в конце, чтобы указать, что символ вообще не совпадает или может совпадать много раз. Например, укажите, что буква `e` никогда не должна встречаться в тексте или это может быть один или несколько раз.",

  "steps.plusCharacter.title": "Знак плюс `+`",
  "steps.plusCharacter.description": "Чтобы указать, что символ может встречаться один или несколько раз, мы ставим знак плюс `+` в конце. Например, указываем, что буква `e` может встречаться один или несколько раз в тексте.",

  "steps.questionMark.title": "Вопросительный знак `?`",
  "steps.questionMark.description": "Чтобы указать, что символ является необязательным, мы ставим в конце вопросительный знак `?`. Например, указываем, что следующая буква `u` необязательна.",

  "steps.quantifier.title": "Фигурные скобки - 1",
  "steps.quantifier.description": "Чтобы выразить определенное количество вхождений символа, мы пишем фигурные скобки `{n}` вместе с указанием того, сколько раз мы хотим, чтобы он встречался в конце. Например, укажите, что следующая буква `e` может встречаться только `2` раза.",

  "steps.quantifierMin.title": "Фигурные скобки - 2",
  "steps.quantifierMin.description": "Чтобы выразить определенное количество вхождений символа, мы пишем в конец символа сколько раз мы хотим, чтобы он встречался, с запятой `,` в конце и внутри фигурных скобок `{n,}`. Например, укажите, что следующая буква `e` может встречаться не менее `3` раз.",

  "steps.quantifierRange.title": "Фигурные скобки - 3",
  "steps.quantifierRange.description": "Чтобы указать, что символ должен встречаться в тексте не менее X но не более Y раз, мы пишем фигурные скобки `{x,y}` с интервалом, с которым мы хотим перейти в конец. Например, укажите, что следующая буква `e` может встречаться только между `1` и `3`.",

  "examples.asterisk.title": "Практика: Звёздочка `*`",
  "examples.asterisk.description": "Используйте звездочку `*`, чтобы написать выражение для выбора всех слов, в которых буква е встречается 0 или более раз.",

  "examples.plusCharacter.title": "Практика: Знак плюс `+`",
  "examples.plusCharacter.description": "Напишите выражение, используя знак плюса `+` для выбора слов, в которых буква `e` встречается в тексте один или несколько раз.",

  "examples.questionMark.title": "Практика: Вопросительный знак `?`",
  "examples.questionMark.description": "Напишите выражение, указывающее, что буква `n` необязательна в тексте, используя вопросительный знак `?`. Таким образом, можно выбрать оба слова `a` и `an`.",

  "examples.quantifier.title": "Практика: Фигурные скобки - 1",
  "examples.quantifier.description": "Напишите выражение, чтобы найти 4 цифры, идущие друг за другом, используя фигурные скобки `{}`. Помните, что диапазон `[0-9]` будет соответствовать одной цифре.",

  "examples.quantifierMin.title": "Практика: Фигурные скобки - 2",
  "examples.quantifierMin.description": "Введите выражение, используя фигурные скобки `{}`, чтобы выбрать числа от `0` до `9`, которые встречаются в тексте не менее `2` раз.",

  "examples.quantifierRange.title": "Практика: Фигурные скобки - 3",
  "examples.quantifierRange.description": "Напишите выражение, используя фигурные скобки `{}`, чтобы выбрать числа от `0` до `9` в тексте, длиной от `1` до `4` знаков.",

  "steps.grouping.title": "Круглые скобки `()`: Группа",
  "steps.grouping.description": "Мы можем сгруппировать выражение и использовать эти группы для ссылки или обеспечения соблюдения некоторых правил. Чтобы сгруппировать выражение, мы заключаем `()` в круглые скобки. Сейчас просто сгруппируйте `haa` ниже.",

  "steps.groupReference.title": "Ссылка на группу",
  "steps.groupReference.description": "Слово `ha` и `haa` сгруппированы ниже. Первая группа используется путем записи `\\1`, чтобы избежать перезаписи. Здесь `1` обозначает порядок группировки. Введите `\\2` в конце выражения для обозначения второй группы.",

  "steps.nonCapturingGrouping.title": "Круглые скобки `(?:)`: Группа без захвата",
  "steps.nonCapturingGrouping.description": "Вы можете сгруппировать выражение и убедиться, что оно не перехватывается ссылками. Например, ниже представлены две группы, однако первая групповая ссылка, которую мы обозначаем с помощью `\\1`, фактически указывает на вторую группу, так как первая - незафиксированная группа.",

  "steps.pipeCharacter.title": "Вертикальная черта `|`",
  "steps.pipeCharacter.description": "Позволяет указать, что выражение может быть в разных частях строки. Таким образом, все возможные операторы записываются через вертикальную черту `|`, это отличается от кодировки `[abc]`, работающего с кодировками на уровне символов. Например, в следующем выражении будут выбраны `cat` и `rat`. Добавьте еще один вертикальный знак `|` в конец выражения и введите `dog`, чтобы все слова были выбраны.",

  "steps.escapeCharacter.title": "Escape-символ `\\`",
  "steps.escapeCharacter.description": "Есть специальные символы, которые мы используем при написании регулярных выражениях: `{} [] / \\ + *. $ ^ |?`. Эти символы можно выбирать escape-символами, использez косую черту `\\`. Например, чтобы выделить в тексте символы точки `.` и звездочки `*`, давайте добавим перед ними косую черту `\\`.",

  "steps.caret.title": "Знак каретки `^`:\\n Выбор по началу строки",
  "steps.caret.description": "Мы использовали `[0-9]` для поиска чисел. Чтобы найти только числа в начале строки, добавьте к этому выражению префикс `^`.",

  "steps.dollar.title": "Знак доллара `$`:\\n Выбор по концу строки",
  "steps.dollar.description": "Давайте используем знак `$` после значения `html`, чтобы найти тексты `html` только в конце строки.",

  "steps.wordCharacter.title": "Цифробуквенный `\\w`: буква, число и подчеркивание",
  "steps.wordCharacter.description": "Выражение `\\w` используется для поиска букв, цифр и символов подчеркивания. Давайте воспользуемся выражением `\\w` для поиска словесных символов в тексте.",

  "steps.withoutWordCharacter.title": "Кроме цифробуквенных `\\W`",
  "steps.withoutWordCharacter.description": "Выражение `\\W` используется для поиска символов, отличимых от букв, цифр и знаков подчеркивания.",

  "steps.numberCharacter.title": "Числовой символ `\\d`",
  "steps.numberCharacter.description": "`\\d` используется для поиска только числовых символов.",

  "steps.withoutNumberCharacter.title": "Кроме символа числа `\\D`",
  "steps.withoutNumberCharacter.description": "`\\D` используется для поиска нечисловых символов.",

  "steps.spaceCharacter.title": "Пробел `\\s`",
  "steps.spaceCharacter.description": "`\\s` используется для поиска только пробелов.",

  "steps.withoutSpaceCharacter.title": "Кроме символа пробела `\\S`",
  "steps.withoutSpaceCharacter.description": "`\\S` используется для поиска непробельных символов.",

  "steps.lookarounds.title": "Lookarounds (Позиционные проверки)",
  "steps.lookarounds.description": "Если мы хотим, чтобы фраза, которую мы пишем, находилась до или после другой фразы, нам нужно использовать \"lookaround\". Выполните следующий шаг, чтобы узнать, как работает \"lookaround\".",

  "steps.positiveLookahead.title": "Позитивная опережающая проверка: `(?=)`",
  "steps.positiveLookahead.description": "Например, мы хотим выбрать значение часа в тексте. Следовательно, чтобы выбрать только числовые значения, после которых стоит `PM`, нам нужно написать выражение позитивной опережающей проверки `(?=)` после нашего выражения. Включите `PM` после знака `=` внутри скобок.",

  "steps.negativeLookahead.title": "Негативная опережающая проверка: `(?!)`",
  "steps.negativeLookahead.description": "Например, мы хотим выбрать в тексте числа, отличные от значения часа. Следовательно, нам нужно написать выражение негативной опережающей проверки `(?!)` после нашего выражения, чтобы выбрать только числовые значения, после которых не ставится `PM`. Включите `PM` после знака `!` внутри скобок.",

  "steps.positiveLookbehind.title": "Позитивная ретроспективная проверка: `(?<=)`",
  "steps.positiveLookbehind.description": "Например, мы хотим выбрать значение цены в тексте. Следовательно, чтобы выбрать только числовые значения, которым предшествует `$`, нам нужно написать выражение позитивной ретроспективной проверки `(? < =)` перед нашим выражением. Добавьте `\\$` после знака `=` внутри скобок.",

  "steps.negativeLookbehind.title": "Негативная ретроспективная проверка: `(?&lt;!)`",
  "steps.negativeLookbehind.description": "Например, мы хотим выбрать в тексте числа, отличные от значения цены. Следовательно, чтобы выбрать только числовые значения, которым не предшествует `$`, нам нужно написать выражение негативной ретроспективной проверки `(?&lt;!)` перед нашим выражением. Добавьте `\\$` после `!` внутри скобок.",

  "steps.flags.title": "Флаги",
  "steps.flags.description": "Флаги изменяют вывод выражения, вот почему флаги еще называют `modifiers`. Они определяют, обрабатывают типизированные выражения, текста, как отдельные строки, учитывают регистр или находят все совпадения. Перейдите к следующему шагу, чтобы изучить флаги.",

  "steps.flagsGlobal.title": "Глобальный флаг",
  "steps.flagsGlobal.description": "Флаг `global` заставляет выражение выбирать все совпадения. Если не используется, будет выбрано только первое совпадение. Теперь включите флаг `global`, чтобы иметь возможность выбирать все совпадения.",

  "steps.flagsMultiline.title": "Многострочный флаг",
  "steps.flagsMultiline.description": "Regex видит весь текст как одну строку, но мы используем флаг `multiline` для обработки каждой строки отдельно. Таким образом, выражения мы пишем по окончанию линии отдельно для каждой строки. Теперь включите флаг `multiline`, чтобы найти все совпадения.",

  "steps.flagsCaseInsensitive.title": "Флаг без учета регистра",
  "steps.flagsCaseInsensitive.description": "Чтобы убрать чувствительность к регистру в написанном нами выражении, мы должны активировать флаг `case-insensitive`.",

  "steps.greedyMatching.title": "Жадное соответствие",
  "steps.greedyMatching.description": "Regex по умолчанию выполняет жадное сопоставление. Это означает, что подбор будет максимально продолжительным, посмотрите пример ниже. Он относится к любому совпадению, которое заканчивается на `r` и может быть любым предшествующий ему символ. Но он не заканчивается на первой букве `r`.",

  "steps.lazyMatching.title": "Ленивое соответствие",
  "steps.lazyMatching.description": "Ленивое сопоставление, в отличие от жадного сопоставления, останавливается при первом сопоставлении. Например, в приведенном ниже примере добавьте `?` после `*`, чтобы найти первое совпадение, которое заканчивается буквой `r` и перед ним стоит любой символ. Это означает, что совпадение остановится на первой букве `r`.",

  "steps.completeAllSteps.title": "Поздравляем, вы прошли все шаги!",
  "steps.completeAllSteps.description": "Вы можете вернуться к предыдущим шагам, когда захотите и вы можете легко перемещаться по всем шагам, которые вы прошли."
}
